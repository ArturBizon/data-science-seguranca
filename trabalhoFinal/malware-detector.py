import os
import shutil
import sys
import xml.etree.ElementTree as ET

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier

from joblib import dump, load
# Define as colunas que os classificadores consideram para classificar o dado
colunsUse = ['android.intent.action.call', 'android.intent.action.delete', 'android.intent.action.dial', 'android.intent.action.insert', 'android.intent.action.main', 'android.intent.action.search', 'android.intent.action.send', 'android.intent.action.sendto', 'android.intent.action.view', 'android.intent.action.view.1', 'android.intent.category.default', 'android.intent.category.home', 'android.intent.category.launcher', 'android.intent.extra.bcc', 'android.intent.extra.cc', 'android.intent.extra.email', 'android.intent.extra.stream', 'android.intent.extra.subject', 'android.intent.extra.text', 'android.intent.extra.shortcut.intent', 'android.intent.extra.shortcut.name', 'com.google.android.c2dm.intent.receive', 'com.google.android.c2dm.intent.receive.1', 'com.google.android.c2dm.intent.register', 'com.google.android.c2dm.intent.registration', 'com.google.android.c2dm.intent.registration.1', 'com.google.android.c2dm.intent.unregister', 'android.intent.action.view.2', 'android.intent.action.view.3', 'android.permission.bluetooth', 'android.permission.camera', 'android.permission.internet', 'android.permission.vibrate', 'com.google.android.c2dm.intent.receive.2', 'com.google.android.c2dm.intent.receive.3', 'com.google.android.c2dm.intent.registration.2', 'com.google.android.c2dm.intent.registration.3', 'com.google.android.c2dm.permission.receive', 'android.intent.action.package_added', 'android.intent.action.package_added.1', 'android.intent.action.package_removed', 'num_intent_actions', 'num_third_part_permissions', 'android.permission.read_phone_state', 'android.permission.access_fine_location', 'android.permission.write_settings', 'android.permission.modify_audio_settings', 'android.permission.wake_lock', 'android.permission.record_audio', 'android.permission.access_network_state', 'android.permission.get_tasks', 'android.permission.access_coarse_location', 'android.permission.write_external_storage', 'num_permissions', 'android.intent.action.screen_on', 'android.intent.action.screen_on.1', 'android.intent.action.screen_off', 'android.intent.action.boot_completed', 'android.intent.action.boot_completed.1', 'android.permission.change_wifi_state', 'android.permission.access_wifi_state', 'android.intent.action.boot_completed.2', 'android.intent.action.boot_completed.3', 'android.permission.receive_boot_completed', 'android.intent.extra.shortcut.icon_resource', 'android.permission.bluetooth_admin', 'num_intent_action_other', 'com.android.browser.permission.read_history_bookmarks', 'android.permission.restart_packages', 'android.permission.kill_background_processes', 'android.permission.system_alert_window', 'android.permission.read_sms', 'android.permission.mount_unmount_filesystems', 'com.android.launcher.permission.install_shortcut', 'android.permission.read_logs', 'android.permission.write_contacts', 'android.permission.read_contacts', 'android.permission.call_phone', 'com.android.browser.permission.write_history_bookmarks', 'android.intent.action.user_present', 'android.intent.action.user_present.1', 'android.intent.action.package_added.2', 'android.intent.action.package_added.3', 'android.intent.action.user_present.2', 'android.intent.action.user_present.3', 'android.permission.change_network_state', 'android.intent.action.battery_changed', 'android.intent.action.battery_changed.1', 'android.permission.write_sms', 'android.intent.action.send_multiple', 'android.intent.extra.html_text', 'android.permission.disable_keyguard', 'android.permission.set_wallpaper', 'android.intent.action.phone_state', 'android.intent.action.screen_on.2', 'android.intent.action.screen_on.3', 'android.permission.read_external_storage', 'android.permission.access_location_extra_commands', 'android.intent.action.media_button', 'android.intent.extra.key_event', 'android.permission.get_accounts', 'android.permission.manage_accounts', 'android.permission.authenticate_accounts', 'android.permission.receive_sms', 'android.intent.action.battery_changed.2', 'android.intent.action.battery_changed.3', 'android.permission.send_sms', 'android.permission.change_configuration', 'android.permission.broadcast_sticky', 'android.permission.use_credentials', 'android.permission.read_sync_settings', 'android.intent.action.data_sms_received', 'android.intent.extra.referrer_name', 'android.permission.read_settings', 'num_intents_action_android', 'num_android_permissions']
def get_actions(root):
  actions = []
  for actionTag in root.findall("application/activity/intent-filter/action"):
    action = actionTag.attrib["{http://schemas.android.com/apk/res/android}name"]
    actions.append(action.lower())

  for actionTag in root.findall("application/receiver/intent-filter/action"):
    action = actionTag.attrib["{http://schemas.android.com/apk/res/android}name"]
    actions.append(action.lower())

  for actionTag in root.findall("application/service/intent-filter/action"):
    action = actionTag.attrib["{http://schemas.android.com/apk/res/android}name"]
    actions.append(action.lower())
  
  return actions

def get_permissions(root):  
  permissions = []
  for permissionTag in root.findall('uses-permission'):
    permission = permissionTag.attrib["{http://schemas.android.com/apk/res/android}name"]
    permissions.append(permission.lower())
    
  for permissionTag in root.findall('uses-permission-sdk-23'):
    permission = permissionTag.attrib["{http://schemas.android.com/apk/res/android}name"]
    permissions.append(permission.lower())
  
  return permissions

def read_manifest(path):
  tree = ET.parse(path)
  root = tree.getroot()
  permissions = get_permissions(root)
  actions = get_actions(root)
  return (permissions, actions)

def count_android_occurrence(itens):
  counts = 0
  for item in itens:
    if "android" in item:
      counts += 1
  return counts

def load_manifest(path):
  df = pd.DataFrame(columns=colunsUse)
  permissions, actions = read_manifest(path)
  dic = {}

  dic["num_permissions"] = len(permissions)
  nAndroidPermissions =  count_android_occurrence(permissions)
  dic["num_android_permissions"] = nAndroidPermissions
  dic ["num_third_part_permissions"] = len(permissions) - nAndroidPermissions

  dic["num_intent_actions"] = len(actions)
  nAndroidActions = count_android_occurrence(actions)
  dic["num_intents_action_android"] = nAndroidActions
  dic["num_intent_action_other"] = len(actions) - nAndroidActions

  lista = [*permissions, *actions]
  valores = list(set(colunsUse) & set(lista))
  for key in valores:
    dic[key] = 1
  df = df.append(dic, ignore_index=True)
  df = df.fillna(0)
  return df

def classify_sample(df):
  positiveClassifiers = []
  negativeClassifiers = []

  rf80x20 = load("randomForest80x20.joblib")
  rf50x50 = load("randomForest50x50.joblib")

  knn80x20 = load("knn80x20.joblib")
  knn50x50 = load("knn50x50.joblib")

  mlp80x20 = load("mlp80x20.joblib")
  mlp50x50 = load("mlp50x50.joblib")

  predict = rf80x20.predict(df)
  if predict == 0:
    negativeClassifiers.append("Random Forest 80x20")
  else:
    positiveClassifiers.append("Random Forest 80x20")
  
  predict = rf50x50.predict(df)
  if predict == 0:
    negativeClassifiers.append("Random Forest 50x50")
  else:
    positiveClassifiers.append("Random Forest 50x50")

  predict = knn80x20.predict(df)
  if predict == 0:
    negativeClassifiers.append("KNN 80x20")
  else:
    positiveClassifiers.append("KNN 80x20")
  
  predict = knn50x50.predict(df)
  if predict == 0:
    negativeClassifiers.append("KNN 50x50x")
  else:
    positiveClassifiers.append("KNN 50x50x")

  predict = mlp80x20.predict(df)
  predict = mlp50x50.predict(df)

  predict = mlp80x20.predict(df)
  if predict == 0:
    negativeClassifiers.append("MLP 80x20")
  else:
    positiveClassifiers.append("MLP 80x20")
  
  predict = mlp50x50.predict(df)
  if predict == 0:
    negativeClassifiers.append("MLP 50x50x")
  else:
    positiveClassifiers.append("MLP 50x50x")
  
  print("#"*50)
  print("Quantidade de votos para malware {}".format(len(positiveClassifiers)))
  print("Quantidade de votos para benigno {}".format(len(negativeClassifiers)))
  print("#"*50)
  print("\n")
  print("#"*50)
  print("Classificadores que dizem que eh malware:")
  print("\n".join(positiveClassifiers))
  print("#"*50)
  print("Classificadores que dizem que eh benigno:")
  print("\n".join(negativeClassifiers))
  pass

def main(path):
  apktoolComand = "java -jar apktool_2.6.1.jar d {} -o tmp/decompiled"
  if os.path.exists("tmp"):
    shutil.rmtree("tmp")
  os.makedirs("tmp")

  shutil.copy2(path, "tmp")
  os.system(apktoolComand.format(path))
  df = load_manifest("tmp/decompiled/AndroidManifest.xml")
  classify_sample(df)
  pass

if __name__ == '__main__':
    main(sys.argv[1])